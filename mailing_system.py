from aiogram import Router, Bot, F
from aiogram.types import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
import asyncio

class MailingStates(StatesGroup):
    waiting_for_content = State()
    preview_sent = State()
    waiting_for_button_text = State()
    waiting_for_button_url = State()

def get_mailing_confirmation_keyboard(buttons=None):
    keyboard = []
    
    if buttons:
        for button in buttons:
            keyboard.append([InlineKeyboardButton(text=button['text'], url=button['url'])])
    
    if not buttons or len(buttons) < 4:
        keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="mailing:add_button")])
    
    keyboard.append([
        InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="mailing:confirm_send"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="mailing:confirm_cancel")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def process_mailing_content(message: Message, state: FSMContext):
    if message.content_type == ContentType.TEXT:
        user_text = message.text
        entities = message.entities
        
        await state.update_data({
            'content_type': ContentType.TEXT,
            'text': user_text,
            'entities': entities,
            'buttons': []
        })
        
        await message.answer(
            user_text,
            entities=entities,
            reply_markup=get_mailing_confirmation_keyboard()
        )
        
    elif message.content_type == ContentType.PHOTO:
        photo = message.photo[-1].file_id
        caption = message.caption or ""
        caption_entities = message.caption_entities
        
        await state.update_data({
            'content_type': ContentType.PHOTO,
            'photo': photo,
            'caption': caption,
            'caption_entities': caption_entities,
            'buttons': []
        })
        
        await message.answer_photo(
            photo=photo,
            caption=caption,
            caption_entities=caption_entities,
            reply_markup=get_mailing_confirmation_keyboard()
        )
        
    else:
        await message.answer(
            "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return
    
    await state.set_state(MailingStates.preview_sent)

async def send_mailing_to_all_users(callback: CallbackQuery, state: FSMContext, bot: Bot, get_all_user_ids_func):
    data = await state.get_data()
    content_type = data.get('content_type')
    buttons = data.get('buttons', [])
    
    if not content_type:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    user_ids = await get_all_user_ids_func()
    
    if not user_ids:
        await callback.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
        return
    
    if callback.message.text:
        await callback.message.edit_text("üì§ **–û–¢–ü–†–ê–í–ö–ê –†–ê–°–°–´–õ–ö–ò...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    else:
        await callback.message.answer("üì§ **–û–¢–ü–†–ê–í–ö–ê –†–ê–°–°–´–õ–ö–ò...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    success_count = 0
    error_count = 0
    
    keyboard = []
    if buttons:
        for button in buttons:
            keyboard.append([InlineKeyboardButton(text=button['text'], url=button['url'])])
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard) if keyboard else None
    
    print(f"[MAILING] –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    for i, user_id in enumerate(user_ids, 1):
        try:
            if content_type == ContentType.TEXT:
                text = data.get('text')
                entities = data.get('entities')
                await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    entities=entities,
                    reply_markup=reply_markup
                )
                print(f"[MAILING] ‚úÖ [{i}/{len(user_ids)}] –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            elif content_type == ContentType.PHOTO:
                photo = data.get('photo')
                caption = data.get('caption')
                caption_entities = data.get('caption_entities')
                await bot.send_photo(
                    chat_id=user_id,
                    photo=photo,
                    caption=caption,
                    caption_entities=caption_entities,
                    reply_markup=reply_markup
                )
                print(f"[MAILING] ‚úÖ [{i}/{len(user_ids)}] –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            success_count += 1
            
            await asyncio.sleep(0.05)
            
        except Exception as e:
            error_count += 1
            error_msg = str(e)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–≥–∞
            if "bot was blocked by the user" in error_msg:
                print(f"[MAILING] ‚ùå [{i}/{len(user_ids)}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            elif "bot can't initiate conversation with a user" in error_msg:
                print(f"[MAILING] ‚ùå [{i}/{len(user_ids)}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—Å–∞–ª /start)")
            elif "user is deactivated" in error_msg:
                print(f"[MAILING] ‚ùå [{i}/{len(user_ids)}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            else:
                print(f"[MAILING] ‚ùå [{i}/{len(user_ids)}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    result_text = (
        f"‚úÖ **–†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!**\n\n"
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
        f"üìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}"
    )
    
    print(f"[MAILING] üéØ –†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê! –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}, –í—Å–µ–≥–æ: {len(user_ids)}")
    
    if callback.message.text:
        await callback.message.edit_text(result_text)
    else:
        await callback.message.answer(result_text)
    
    await state.clear()

async def cancel_mailing(callback: CallbackQuery, state: FSMContext):
    if callback.message.text:
        await callback.message.edit_text("‚ùå **–†–ê–°–°–´–õ–ö–ê –û–¢–ú–ï–ù–ï–ù–ê**")
    else:
        await callback.message.answer("‚ùå **–†–ê–°–°–´–õ–ö–ê –û–¢–ú–ï–ù–ï–ù–ê**")
    await state.clear()

async def add_button_start(callback: CallbackQuery, state: FSMContext):
    if callback.message.text:
        await callback.message.edit_text(
            "üìù **–î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ù–û–ü–ö–ò**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ù–∞—à —Å–∞–π—Ç', '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', '–ö—É–ø–∏—Ç—å')",
            parse_mode="Markdown"
        )
    else:
        await callback.message.answer(
            "üìù **–î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ù–û–ü–ö–ò**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ù–∞—à —Å–∞–π—Ç', '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', '–ö—É–ø–∏—Ç—å')",
            parse_mode="Markdown"
        )
    await state.set_state(MailingStates.waiting_for_button_text)

async def process_button_text(message: Message, state: FSMContext):
    button_text = message.text.strip()
    
    if len(button_text) > 64:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    await state.update_data(temp_button_text=button_text)
    
    await message.answer(
        "üîó **–°–°–´–õ–ö–ê –ö–ù–û–ü–ö–ò**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://example.com)",
        parse_mode="Markdown"
    )
    await state.set_state(MailingStates.waiting_for_button_url)

async def process_button_url(message: Message, state: FSMContext):
    button_url = message.text.strip()
    
    if not button_url.startswith(('http://', 'https://', 'tg://')):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http://, https:// –∏–ª–∏ tg://")
        return
    
    data = await state.get_data()
    button_text = data.get('temp_button_text')
    buttons = data.get('buttons', [])
    
    new_button = {'text': button_text, 'url': button_url}
    buttons.append(new_button)
    
    await state.update_data(buttons=buttons)
    await state.update_data(temp_button_text=None)
    
    content_type = data.get('content_type')
    
    if content_type == ContentType.TEXT:
        text = data.get('text')
        entities = data.get('entities')
        await message.answer(
            text,
            entities=entities,
            reply_markup=get_mailing_confirmation_keyboard(buttons)
        )
    elif content_type == ContentType.PHOTO:
        photo = data.get('photo')
        caption = data.get('caption')
        caption_entities = data.get('caption_entities')
        await message.answer_photo(
            photo=photo,
            caption=caption,
            caption_entities=caption_entities,
            reply_markup=get_mailing_confirmation_keyboard(buttons)
        )
    
    await state.set_state(MailingStates.preview_sent)

def setup_mailing_handlers(router: Router, bot: Bot, get_all_user_ids_func, is_admin_func=None):
    
    @router.message(Command("mailing"))
    async def start_mailing_command(message: Message, state: FSMContext):
        if is_admin_func and not await is_admin_func(message.from_user.id):
            return
        
        await message.answer(
            "üìß **–°–ò–°–¢–ï–ú–ê –†–ê–°–°–´–õ–ö–ò**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞!\n\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä.",
            parse_mode="Markdown"
        )
        await state.set_state(MailingStates.waiting_for_content)
    
    @router.message(MailingStates.waiting_for_content)
    async def handle_mailing_content(message: Message, state: FSMContext):
        if is_admin_func and not await is_admin_func(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            await state.clear()
            return
        await process_mailing_content(message, state)
    
    @router.callback_query(F.data == "mailing:add_button")
    async def add_button_callback(callback: CallbackQuery, state: FSMContext):
        if is_admin_func and not await is_admin_func(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.", show_alert=True)
            await state.clear()
            return
        await add_button_start(callback, state)
    
    @router.message(MailingStates.waiting_for_button_text)
    async def handle_button_text(message: Message, state: FSMContext):
        if is_admin_func and not await is_admin_func(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            await state.clear()
            return
        await process_button_text(message, state)
    
    @router.message(MailingStates.waiting_for_button_url)
    async def handle_button_url(message: Message, state: FSMContext):
        if is_admin_func and not await is_admin_func(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            await state.clear()
            return
        await process_button_url(message, state)
    
    @router.callback_query(F.data == "mailing:confirm_send")
    async def confirm_send_mailing(callback: CallbackQuery, state: FSMContext):
        if is_admin_func and not await is_admin_func(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.", show_alert=True)
            await state.clear()
            return
        await send_mailing_to_all_users(callback, state, bot, get_all_user_ids_func)
    
    @router.callback_query(F.data == "mailing:confirm_cancel")
    async def cancel_mailing_callback(callback: CallbackQuery, state: FSMContext):
        if is_admin_func and not await is_admin_func(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.", show_alert=True)
            await state.clear()
            return
        await cancel_mailing(callback, state)
