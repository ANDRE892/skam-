import asyncio
import os
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ChatJoinRequest, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
from database import init_db, save_user, close_db, get_all_users
from mailing_system import setup_mailing_handlers

load_dotenv()
TOKEN = os.getenv('TOKEN')
CHANNEL_LINK = os.getenv("CHANNEL_LINK", "https://t.me/+eXOltHvhsk81NTgy")
RESERVE_LINKS = os.getenv("RESERVE_LINKS")

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

CHANNEL_ID = -1002788956369

ADMIN_IDS = [7118184736, 889158373]

@router.message(Command("start"))
async def start_command(message: Message):
    user = message.from_user
    print(f"[LOG] –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{user.username})")
    
    await save_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    if user.id in ADMIN_IDS:
        admin_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\nüîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:mailing")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")]
        ])
        await message.answer(admin_text, reply_markup=admin_keyboard)
        print(f"[LOG] –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
    else:
        print(f"[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} (@{user.username}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º - –ø–∞–Ω–µ–ª—å –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞")


@router.callback_query(F.data.startswith('admin:'))
async def admin_callback(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return
    
    action = callback.data.split(':')[1]
    
    if action == "mailing":
        await callback.message.edit_text(
            "üìß **–°–ò–°–¢–ï–ú–ê –†–ê–°–°–´–õ–ö–ò**\n\n"
            "/mailing.",
            parse_mode="Markdown"
        )
        
    elif action == "stats":
        users = await get_all_users()
        stats_text = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
        await callback.message.edit_text(stats_text, parse_mode="Markdown")
        
    elif action == "users":
        users = await get_all_users()
        if users:
            users_text = "üë• **–ü–û–°–õ–ï–î–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:**\n\n"
            for i, user in enumerate(users[:10], 1):
                username = f"@{user['username']}" if user['username'] else "–ù–µ—Ç username"
                name = f"{user['first_name'] or ''} {user['last_name'] or ''}".strip()
                name = name if name else "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                users_text += f"{i}. {name} ({username})\n"
        else:
            users_text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç"
        
        await callback.message.edit_text(users_text, parse_mode="Markdown")



@router.chat_join_request()
async def on_join_request(event: ChatJoinRequest):
    user_id = event.from_user.id
    username = event.from_user.username
    print(f"[LOG] –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç {user_id} (@{username})")
    
    await save_user(user_id, event.from_user.username, event.from_user.first_name, event.from_user.last_name)
    
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–Ø —á–µ–ª–æ–≤–µ–∫")]], resize_keyboard=True)
    
    try:
        await bot.send_message(
            user_id,
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –∫–∞–Ω–∞–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—ã —á–µ–ª–æ–≤–µ–∫:",
            reply_markup=markup
        )
        print(f"[LOG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–Ø —á–µ–ª–æ–≤–µ–∫' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        if "bot was blocked by the user" in str(e):
            print(f"[WARNING] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        else:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

@router.message(F.text == "–Ø —á–µ–ª–æ–≤–µ–∫")
async def verify_human_message(message: Message):
    user = message.from_user
    print(f"[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} (@{user.username}) –Ω–∞–∂–∞–ª '–Ø —á–µ–ª–æ–≤–µ–∫'")
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    reserve_links = RESERVE_LINKS.split(',')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–∞–º–∏
    text = "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –∫–∞–Ω–∞–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ —Ä–µ–∑–µ—Ä–≤—ã üëá\n\n"
    for i, link in enumerate(reserve_links, 1):
        text += f"–†–µ–∑–µ—Ä–≤ {i} ‚Äì {link.strip()}\n"
    
    try:
        await message.answer(
            text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        print(f"[LOG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–∑–µ—Ä–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
    except Exception as e:
        if "bot was blocked by the user" in str(e):
            print(f"[WARNING] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        else:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")

async def get_all_user_ids():
    users = await get_all_users()
    return [user['user_id'] for user in users]

async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def main():
    print("[LOG] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    
    setup_mailing_handlers(router, bot, get_all_user_ids, is_admin)
    
    print("[LOG] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è...")
    try:
        await dp.start_polling(bot, skip_updates=True)
    finally:
        await close_db()

if __name__ == "__main__":
    asyncio.run(main())